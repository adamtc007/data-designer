(* Data Designer DSL Grammar - EBNF Notation *)
(* This grammar describes the expression language implemented using nom parser combinators *)

(* ============================================================================ *)
(* Main Entry Point *)
(* ============================================================================ *)

rule = assignment | expression ;

(* ============================================================================ *)
(* Assignments *)
(* ============================================================================ *)

assignment = identifier, "=", expression ;

(* ============================================================================ *)
(* Expressions - Operator Precedence (lowest to highest) *)
(* ============================================================================ *)

expression = logical_or ;

(* Logical Operations *)
logical_or = logical_and, { ("or" | "||"), logical_and } ;
logical_and = comparison, { ("and" | "&&"), comparison } ;

(* Comparison Operations *)
comparison = concatenation, [ comparison_op, concatenation ] ;
comparison_op = "<=" | ">=" | "!=" | "<>" | "==" | "=" | "<" | ">" ;

(* String Concatenation *)
concatenation = arithmetic, { "&", arithmetic } ;

(* Arithmetic Operations *)
arithmetic = term, { ("+"|"-"), term } ;
term = unary, { ("*"|"/"|"%"), unary } ;

(* Unary Operations *)
unary = [ "not" | "!" | "-" ], power ;

(* Power Operation *)
power = primary, { "**", primary } ;

(* ============================================================================ *)
(* Primary Expressions *)
(* ============================================================================ *)

primary = number
        | string_literal
        | boolean
        | function_call
        | list
        | identifier
        | "(", expression, ")" ;

(* ============================================================================ *)
(* Function Calls *)
(* ============================================================================ *)

function_call = identifier, "(", [ argument_list ], ")" ;
argument_list = expression, { ",", expression } ;

(* ============================================================================ *)
(* Lists *)
(* ============================================================================ *)

list = "[", [ expression, { ",", expression } ], "]" ;

(* ============================================================================ *)
(* Literals *)
(* ============================================================================ *)

(* Numbers - integers and floating point *)
number = [ "-" ], digit, { digit }, [ ".", digit, { digit } ] ;

(* String Literals - double or single quoted *)
string_literal = ('"', { string_char | escape_sequence }, '"')
               | ("'", { string_char | escape_sequence }, "'") ;

string_char = ? any character except quote or backslash ? ;
escape_sequence = "\", ( "n" | "r" | "t" | "\" | '"' | "'" ) ;

(* Boolean Literals *)
boolean = "true" | "false" ;

(* Identifiers - variable and function names *)
identifier = ( letter | "_" ), { letter | digit | "_" } ;

(* ============================================================================ *)
(* Lexical Elements *)
(* ============================================================================ *)

letter = "A".."Z" | "a".."z" ;
digit = "0".."9" ;

(* Whitespace is ignored between tokens *)
whitespace = " " | "\t" | "\r" | "\n" ;

(* ============================================================================ *)
(* Built-in Functions *)
(* ============================================================================ *)

(* The following functions are available:

   CONCAT(arg1, arg2, ...)     - Concatenate multiple values
   SUBSTRING(string, start, end) - Extract substring from start to end
   LOOKUP(key, table_name)      - Look up value from external table
   UPPER(string)                - Convert to uppercase
   LOWER(string)                - Convert to lowercase
   LEN(string)                  - Get string length
   LENGTH(string)               - Alias for LEN
   UPPERCASE(string)            - Alias for UPPER
   LOWERCASE(string)            - Alias for LOWER
*)

(* ============================================================================ *)
(* Operator Summary *)
(* ============================================================================ *)

(* Arithmetic Operators:
   +  : Addition
   -  : Subtraction / Negation
   *  : Multiplication
   /  : Division
   %  : Modulo
   ** : Power

   String Operators:
   &  : Concatenation

   Comparison Operators:
   == or = : Equals
   !=      : Not equals
   <       : Less than
   >       : Greater than
   <=      : Less than or equal
   >=      : Greater than or equal

   Logical Operators:
   and or && : Logical AND
   or  or || : Logical OR
   not or !  : Logical NOT
*)

(* ============================================================================ *)
(* Examples *)
(* ============================================================================ *)

(* Simple arithmetic:
   result = 10 + 20 * 3

   String operations:
   message = "Hello " & name & "!"

   Function calls:
   code = SUBSTRING(user_id, 0, 3)
   full_name = CONCAT(first_name, " ", last_name)

   Complex expressions:
   total = (base_price + tax) * quantity
   status = age >= 18 and verified == true

   Lists:
   numbers = [1, 2, 3, 4, 5]
   mixed = ["text", 42, true, price * 2]
*)